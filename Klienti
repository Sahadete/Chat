
import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Klienti extends JFrame {

	private JTextArea biseda;
	private JTextField clientMessage;
	private JButton butoniDergo;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	String message;
	private Socket lidhja;
	private String serverIP;
	
	

	public Klienti(String host) {
		super("Klienti");
		serverIP = host;

		biseda = new JTextArea();
		biseda.setBounds(50, 50, 300, 250);
		biseda.setBorder(BorderFactory.createLoweredBevelBorder());
		biseda.setEditable(false);
		add(biseda);

		clientMessage = new JTextField();
		clientMessage.setBounds(50, 320, 300, 50);
		clientMessage.setBorder(BorderFactory.createLoweredBevelBorder());
		clientMessage.requestFocus();
		clientMessage.setEditable(false);
		add(clientMessage);

		butoniDergo = new JButton("Dergo");
		butoniDergo.setBounds(250, 400, 100, 40);
		butoniDergo.setBorder(BorderFactory.createLoweredBevelBorder());
		butoniDergo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				String msg = clientMessage.getText();
				dergoMessage(msg);
				clientMessage.setText("");
			}
		});

		add(butoniDergo, FlowLayout.RIGHT);

		setLayout(null);

		setSize(420, 500);
		setVisible(true);

	}

	// connect to server
	public void fillo() {
		try {
			lidhuMeServerin();
			ndertoStreams();
			dukeBiseduar();
		} catch (EOFException eof) {
			shfaqMessage("\n Klienti ka perfunduar lidhjen!");
		} catch (IOException io) {
			io.printStackTrace();
		} finally {
			perfundo();
		}
	}

	// lidhu me serverin
	private void lidhuMeServerin() throws IOException {
		shfaqMessage("Duke provuar te lidhemi.. \n");
		 lidhja = new Socket(InetAddress.getByName(serverIP), 6789); 
		shfaqMessage("Lidhur me: " + lidhja.getInetAddress().getHostName());
	}

	// nderto streams per input dhe output
	private void ndertoStreams() throws IOException {
		output = new ObjectOutputStream(lidhja.getOutputStream());
		output.flush();
		input = new ObjectInputStream(lidhja.getInputStream());

	}
	

	private void dukeBiseduar() throws IOException {
		mundTeShkruaj(true);
		do {
			try {
				message = (String) input.readObject();
				shfaqMessage("\n " + message);
			} catch (ClassNotFoundException cl) {
				cl.printStackTrace();
			}

		} 
		
		
		while (!message.equals(lidhja.getInetAddress() + " - NDAL"));
		
	}

	
	
	// perfundo lidhjen
	private void perfundo() {
		shfaqMessage("\n Duke perfunduar lidhjen!");
		mundTeShkruaj(false);
		try {
			output.close();
			input.close();
			lidhja.close();
			shkruajNeFajl();

		} catch (IOException io) {
			io.printStackTrace();
		}

	}

	// dergo mesazhin
	private void dergoMessage(String message) {
		try {
			output.writeObject( "KLIENTI - " + message);
			output.flush();
			shfaqMessage("\n KLIENTI - " + message);
		} catch (IOException io) {
			biseda.append("\n Mesazhi nuk mund te dergohej!");
		}

	}

	// fresko biseden
	private void shfaqMessage(final String msg) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				biseda.append(msg);
			}
		});

	}

	// jep mundsine klientit te shkruaje
	private void mundTeShkruaj(final boolean leje) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				clientMessage.setEditable(leje);
			}
		});
	}

	public void shkruajNeFajl() {
		String emriFajlit = "biseda.txt";
		// String rreshti = null;

		try {
			FileWriter shkruesi = new FileWriter(emriFajlit, true);
			BufferedWriter bufferedWriter = new BufferedWriter(shkruesi);
			String bisedaPerTuShkruar = biseda.getText();
			bufferedWriter.write(bisedaPerTuShkruar);
			bufferedWriter.newLine();

			bufferedWriter.close();

		}

		catch (IOException ioe) {
			System.out.println("Gabim gjate shkrimit ne fajlin " + emriFajlit);
		}

	}

}
