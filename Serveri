
import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Serveri extends JFrame {

	private JTextArea biseda;
	private JTextField serverMessage;
	private JButton butoniDergo;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	String message = "";
	private Socket lidhja;
	private ServerSocket server;

	public Serveri() {
		super("Serveri");

		biseda = new JTextArea();
		biseda.setBounds(50, 50, 300, 250);
		biseda.setEditable(false);
		biseda.setBorder(BorderFactory.createLoweredBevelBorder());
		add(biseda);

		serverMessage = new JTextField();
		serverMessage.setBounds(50, 320, 300, 50);
		serverMessage.setBorder(BorderFactory.createLoweredBevelBorder());
		serverMessage.requestFocus();
		serverMessage.setEditable(false);
		add(serverMessage);

		butoniDergo = new JButton("Dergo");
		butoniDergo.setBounds(250, 400, 100, 40);
		butoniDergo.setBorder(BorderFactory.createLoweredBevelBorder());
		butoniDergo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				String msg = serverMessage.getText();
				dergoMessage(msg);
				serverMessage.setText("");
			}
		});

		add(butoniDergo);

		setLayout(null);

		setSize(420, 500);
		setVisible(true);

	}

	// connect to server
	public void fillo() {
		try {
			server = new ServerSocket(6789, 100);
			while (true) {
				try {
					pritPerLidhje();
					ndertoStreams();
					dukeBiseduar();
					System.out.println(lidhja.getInetAddress());
				} catch (EOFException eof) {
					shfaqMessage("\n Serveri ka perfunduar lidhjen!");
				} finally {
					perfundo();
				}
			}

		} catch (IOException io) {
			io.printStackTrace();
		}

	}

	// lidhu me klientin
	private void pritPerLidhje() throws IOException {
		shfaqMessage("Duke provuar te lidhemi.. \n");
		lidhja = server.accept();// connection is created between the client and
									// server
		shfaqMessage("Lidhur me: " + lidhja.getInetAddress().getHostName());
	}

	// nderto streams per input dhe output
	private void ndertoStreams() throws IOException {
		output = new ObjectOutputStream(lidhja.getOutputStream());
		output.flush();
		input = new ObjectInputStream(lidhja.getInputStream());

	}

	private void dukeBiseduar() throws IOException {
		String message = "Tani jeni i lidhur!";
		dergoMessage(message);
		mundTeShkruaj(true);
		do {
			try {
				message = (String) input.readObject();
				shfaqMessage("\n " + message);
			} catch (ClassNotFoundException cl) {
				cl.printStackTrace();
			}

		} while (!message.equals("KLIENTI - NDAL"));
	}

	// perfundo lidhjen
	private void perfundo() {
		shfaqMessage("\n Duke perfunduar lidhjen!");
		mundTeShkruaj(false);
		try {
			output.close();
			input.close();
			lidhja.close();
			shkruajNeFajl();
		} catch (IOException io) {
			io.printStackTrace();
		}

	}

	// dergo mesazhin
	private void dergoMessage(String message) {
		try {
			output.writeObject(lidhja.getInetAddress().getHostName() + " - " + message);
			output.flush();
			shfaqMessage("\n" + lidhja.getInetAddress().getHostName() + " - " + message);
		} catch (IOException io) {
			biseda.append("\n Mesazhi nuk mund te dergohej!");
		}

	}

	// fresko biseden
	private void shfaqMessage(final String msg) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				biseda.append(msg);
			}
		});

	}

	// jep mundsine klientit te shkruaje
	private void mundTeShkruaj(final boolean leje) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				serverMessage.setEditable(leje);
			}
		});
	}

	public void shkruajNeFajl() {
		String emriFajlit = "biseda.txt";

		try {
			FileWriter shkruesi = new FileWriter(emriFajlit, true);
			BufferedWriter bufferedWriter = new BufferedWriter(shkruesi);
			String bisedaPerTuShkruar = biseda.getText();
			bufferedWriter.write(bisedaPerTuShkruar + "\n");
			bufferedWriter.newLine();

			bufferedWriter.close();

		}

		catch (IOException ioe) {
			System.out.println("Gabim gjate shkrimit ne fajlin " + emriFajlit);
		}

	}

}
